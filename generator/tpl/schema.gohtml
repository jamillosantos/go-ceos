@{
	import "github.com/jamillosantos/go-ceous/generator/models"
	import . "github.com/jamillosantos/go-ceous/generator/helpers"
	// import "strconv"

	var env *models.Environment
}

type schema struct {
@for _, schema := range env.Schemas {
	if schema.IsModel {@
	@schema.Name@: @Pointer@schema.FullName}
}
}

@for _, schema := range env.Schemas {@
// @schema.FullName have all fields for the model @schema.Name@:.
type @schema.FullName@: struct {
	@if schema.IsModel {@
	*ceous.BaseSchema
	}
	@for _, field := range schema.Fields {@
		@field.Name @if field.Type == "" {
			_buffer.WriteString("ceous.SchemaField")
		} else {
			_buffer.WriteString(field.SchemaName)
		}}
}

}

@*

var (
@for _, s := range ctx.Schemas {
	@if !s.IsModel {@
	baseSchema@s.Name = schema@s.Name {
		@for _, field := range s.Fields {@
			@field.Name : baseSchema@s.BaseSchema.Name@:.ColumnsArr[@s.BaseSchema.FieldsMap[field.ColumnName]],
		}
	}
	}
}
)

// Schema represents the schema of the package "@ctx.InputPkg.Name@:".
var Schema = schema{
@for _, m := range models {@
	@m.Name@:: @raw("&")@m.SchemaName()@: {
	BaseSchema: @m.BaseSchemaName(),

	@for _, field := range m.Fields {
		@field.Name@:: 
		@if field.SchemaType == "" {
		i := m.ColumnsMap[field.FieldName]
		_buffer.WriteString(m.BaseSchemaName() + ".ColumnsArr[" + strconv.Itoa(i) + "],\n")
	} else {
		_buffer.WriteString("baseSchema" + field.SchemaType + ",\n")
	}
	}},
}
}

var (
@for i, schema := range ctx.BaseSchemas {@
	baseSchema@schema.Name = ceous.NewBaseSchema(
		"",
		"", @for _, field := range schema.Fields {@
		ceous.NewSchemaField("@field.ColumnName"),}
	)
	@if i+1 == len(ctx.BaseSchemas) {
		_buffer.WriteString("\n")
	}
@:
}
)
*@