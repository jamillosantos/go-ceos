@{
	import generatorModels "github.com/jamillosantos/go-ceous/generator/models"

	var ctxPkg *generatorModels.Ctx
	var models []*generatorModels.Model
-}

type schema struct {
@for _, m := range models {@
	@m.Name@: @raw("*")@m.SchemaName()
}
}

// Schema represents the schema of the package "@ctxPkg.Pkg.Name@:".
var Schema = schema{
@for _, m := range models {@
	@m.Name@:: @raw("&")@m.SchemaName()@: {
	BaseSchema: @m.BaseSchemaName(),

	@for _, field := range m.Fields {@
		@field.Name@:: @if field.SchemaType == "" {
		i := m.ColumnsMap[field.FieldName]
		@m.BaseSchemaName()@:.ColumnsArr[@i],
	} else {
		@field.SchemaType@:Schema,
	}
	}
	},
}
}

@for _, model := range models {@
var @model.BaseSchemaName() = ceous.NewBaseSchema(
	"@model.TableName",
	"",@for _, field := range model.Columns {@
	ceous.NewSchemaField("@field.Column"@if len(field.Modifiers) > 0 {
		@for _, m := range field.Modifiers {
			@raw(", ")@raw(m())
		}
	}@),
}
)

type @model.SchemaName()@: struct {
	*ceous.BaseSchema

@for _, field := range model.SchemaFields {@
	@field.Name @if field.SchemaType == "" {
		@:ceous.SchemaField
	} else {
		@:schema@field.SchemaType
	}
}
}
}