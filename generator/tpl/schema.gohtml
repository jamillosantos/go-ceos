@{
	import generatorModels "github.com/jamillosantos/go-ceous/generator/models"

	var ctxPkg *generatorModels.Ctx
	var models []*generatorModels.Model
	var embeddeds []*generatorModels.Model
-}@:package @ctxPkg.Pkg.Name

import (
	"github.com/jamillosantos/go-ceous"
	"github.com/pkg/errors"
@for _, pkg := range ctxPkg.Imports {
	if pkg.Alias == "-" {
		continue
	}
	@raw("\n")
@	@pkg.Alias "@pkg.Pkg.ImportPath@:"
}
)

@for _, m := range models {
	@raw("\n\n")
	@:/** @raw("\n")
	@: * Declare @m.Name@raw("\n")
	@: */
	@{RenderModel(_buffer, ctxPkg.Pkg, m)}
}

@for _, m := range embeddeds {
	@raw("\n\n")
	@{RenderEmbedded(_buffer, m)}
}

type schema struct {
@for _, m := range models {
	@raw("\n")
@	@m.Name@: @raw("*")@m.SchemaName()
}
}

// Schema represents the schema of the package "@ctxPkg.Pkg.Name@:".
var Schema = schema{
@for _, m := range models {
	@raw("\n")
@	@m.Name@:: @raw("&")@m.SchemaName() {
@		BaseSchema: @m.BaseSchemaName(),
	@for _, field := range m.Fields {
@	@field.Name@:: @if field.SchemaType == "" {
		i := m.ColumnsMap[field.FieldName]
		@m.BaseSchemaName()@:.ColumnsArr[@i],
	} else {
		@field.SchemaType@:Schema,
	}
	}
	},
}
}

@for _, m := range models {
	@raw("\n\n")
	@{RenderResultset(_buffer, m)}
}

@for _, m := range models {
	@raw("\n\n")
	@{RenderQuery(_buffer, ctxPkg.Pkg, m)}
}

@for _, m := range models {
	@raw("\n\n")
	@{RenderStore(_buffer, m)}
}
