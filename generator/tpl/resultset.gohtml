@{
	import "github.com/jamillosantos/go-ceous/generator/models"
	import "github.com/jamillosantos/go-ceous/generator/naming"
	import . "github.com/jamillosantos/go-ceous/generator/helpers"

	var env *models.Environment
	var schema *models.Schema
}

@{
	resultSetName := naming.CamelCase.Do(schema.Name) + "ResultSet"
}

type @resultSetName struct {
	rs ceous.ResultSet
	recordScanner ceous.RecordScanner
	Model @env.InputPkgCtx.Ref(env.OutputPkg, schema.Name)
}

// New@naming.PascalCase.Do(resultSetName)@: create a new instance of the specialized
// `ceous.ResultSet` for the model `@schema.Name`.
func New@naming.PascalCase.Do(resultSetName)(rs ceous.ResultSet, err error) (@Pointer@resultSetName@:, error) {
	if err != nil {
		return nil, err
	}
	return @raw("&")@resultSetName@:{
		rs: rs,
		recordScanner: &ceous.DefaultRecordScanner,
	}, nil
}

func (rs @Pointer@resultSetName) Next() bool {
	return rs.rs.Next()
}

func (rs @Pointer@resultSetName) Scan() error {
	return rs.recordScanner.ScanRecord(rs.rs, &rs.Model)
}

func (rs @Pointer@resultSetName) Close() error {
	err := rs.rs.Close()
	if err != nil {
		return err
	}
	// Disposes the instance...
	rs.rs = nil
	rs.recordScanner = nil
	return nil
}