@{
	import "github.com/jamillosantos/go-ceous/generator/models"
	import . "github.com/jamillosantos/go-ceous/generator/helpers"

	var env *models.Environment
	var store *models.Store
}

// @store.FullName is the query for the store `@store.Name`.
type @store.FullName@: struct {
	*ceous.BaseStore
}

// New@store.FullName creates a new query for model `@store.Name`.
func New@store.FullName@:(options ...ceous.CeousOption) @Pointer@store.FullName@: {
	return @raw("&")@store.FullName@:{
		BaseStore: ceous.NewStore(@env.InputPkgCtx.Ref(env.OutputPkg, "Schema." + store.Name)@:, options...),
	}
}

func (store @Pointer@store.FullName@:) Insert(record @Pointer@env.InputPkgCtx.Ref(env.OutputPkg, store.Name)@:, fields ...ceous.SchemaField) error {
	return store.BaseStore.Insert(record, fields...)
}

func (store @Pointer@store.FullName@:) Update(record @Pointer@env.InputPkgCtx.Ref(env.OutputPkg, store.Name)@:, fields ...ceous.SchemaField) (int64, error) {
	return store.BaseStore.Update(record, fields...)
}
