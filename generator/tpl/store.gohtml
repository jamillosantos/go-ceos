@{
	import "github.com/jamillosantos/go-ceous/generator/models"

	var env *models.Environment
	var store *models.Store
}

// @store.Name is the query for the store `@store.Name`.
type @store.Name@: struct {
	*ceous.BaseStore
}

// New@store.Name creates a new query for model `@store.Name`.
func New@store.Name@:Store(options ...ceous.CeousOption) @raw("*")@store.Name@: {
	return @raw("&")@store.Name@:{
		BaseStore: ceous.NewStore(@env.InputPkgCtx.Ref(env.OutputPkg, "Schema." + store.Name)@:, options...),
	}
}

func (store @raw("*")@store.Name@:) Insert(record @raw("*")@env.InputPkgCtx.Ref(env.OutputPkg, store.Name)@:, fields ...ceous.SchemaField) error {
	return store.BaseStore.Insert(record, fields...)
}

func (store @raw("*")@store.Name@:) Update(record @raw("*")@env.InputPkgCtx.Ref(env.OutputPkg, store.Name)@:, fields ...ceous.SchemaField) (int64, error) {
	return store.BaseStore.Update(record, fields...)
}
