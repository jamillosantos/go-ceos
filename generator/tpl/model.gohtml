@{
	import "github.com/jamillosantos/go-ceous/generator/models"
	import . "github.com/jamillosantos/go-ceous/generator/helpers"

	var env *models.Environment
	var model *models.Model
}

@if model.PK != nil {@
@:
// GetID returns the primary key for model `@model.Name@:`.
func (model @Pointer@model.Name@:) GetID() interface{} {
	return model.@model.PK.Name
}
}

@for _, relation := range model.Relations {@
// @PascalCase(relation.Name) returns the @relation.Name@: from @model.Name@:.
func (model @Pointer@model.Name@:) @PascalCase(relation.LocalField)@:() @Pointer@relation.ForeignModelType {
	return model.@relation.LocalField
}
@:
// Set@PascalCase(relation.LocalField) updates the value for the @relation.LocalField@:,
// updating the @relation.LocalField@:.
func (model @Pointer@model.Name@:) Set@PascalCase(relation.LocalField)@:(value @Pointer@relation.ForeignModelType) error {
	localPkPtr, err := model.ColumnAddress("@relation.ForeignColumn")
	if err != nil {
		return err
	}

	localFKTypedPtr, ok := localPkPtr.(@Pointer@relation.ForeignFieldType)
	if !ok {
		return errors.New("invalid key type") // TODO(jota): To formalize this error.
	}
	*localFKTypedPtr = value.@relation.ForeignField
	model.@relation.LocalField = value
	return nil
}
}
