@{
	import "github.com/jamillosantos/go-ceous/generator/models"
	// import . "github.com/jamillosantos/go-ceous/generator/helpers"

	var env *models.Environment
	var model *models.Schema
}

@*

@if model.PK != nil {@
@:
// GetID returns the primary key for model `@model.Name@:`.
func (model @Pointer@model.Name@:) GetID() interface{} {
	return model.@model.PK.Name
}
}


@for _, relation := range model.Relations {@
// @PascalCase(relation.FromField) returns the @relation.FromField@: from @model.Name@:.
func (model @Pointer@model.Name@:) @PascalCase(relation.FromField)@:() @Pointer@relation.ToModel.Name {
	return model.@relation.FromField
}
@:
// Set@PascalCase(relation.FromField) updates the value for the @relation.FromField@:,
// updating the @relation.FromField@:.
func (model @Pointer@model.Name@:) Set@PascalCase(relation.FromField)@:(value @Pointer@ctx.InputPkgCtx.Ref(ctx.InputPkg, relation.FromColumnType.RefType.Name())) error {
	c, err := model.ColumnAddress("@relation.ToColumn")
	if err != nil {
		return err
	}

	v, ok := c.(@Pointer@ctx.ModelsImports.Ref(relation.ToModel.PK.Type.RefType))
	if !ok {
		return errors.New("invalid key value") // TODO(jota): To formalize this error.
	}
	*v = value.@relation.ToModel.PK.Name
	model.@relation.FromField = value
	return nil
}
}

@{RenderColumnAddress(_buffer, model)}
@{RenderColumnValue(_buffer, model)}

*@