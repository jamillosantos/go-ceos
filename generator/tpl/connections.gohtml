@{
	import . "github.com/jamillosantos/go-ceous/generator/helpers"
	
	import "github.com/jamillosantos/go-ceous/generator/naming"
	import models "github.com/jamillosantos/go-ceous/generator/models"

	var env *models.Environment
}

type Creator interface {
@for _, query := range env.Queries {@
	// @query.FullName creates a new query related with the connection set.
	@query.FullName@:(options ...ceous.CeousOption) @Pointer@query.FullName
}
@for _, store := range env.Stores {@
	// @store.FullName creates a new store related with the connection set.
	@store.FullName@:(options ...ceous.CeousOption) @Pointer@store.FullName
}
}

type Connection interface {
	ceous.DBRunner
	Creator
}

@for _, conn := range env.Connections {@
type @conn.FullName struct {
	@Pointer@:ceous.BaseConnection
}

	@for _, query := range env.Queries {@
// @query.FullName creates a new query related with the connection @conn.Name@: set.
func (c @Pointer@conn.FullName) @query.Name@:Query(options ...ceous.CeousOption) @Pointer@query.FullName {
	return New@query.FullName@:(append(options, ceous.WithConn(c))...)
}
	}
	@for _, store := range env.Stores {@
// @store.Name@:Store creates a new store related with the connection @conn.Name@: set.
func (c @Pointer@conn.FullName) @store.Name@:Store(options ...ceous.CeousOption) @Pointer@store.FullName {
	return New@store.Name@:Store(append(options, ceous.WithConn(c))...)
}
	}

// Begin creates a new transaction with @conn.Name@: set.
func (c @Pointer@conn.FullName) Begin() (*Transaction, error) {
	tx, err := c.BaseConnection.Begin()
	if err != nil {
		return nil, err
	}
	return NewTransaction(tx), nil
}

// BeginTx creates a new transaction with extended config params with the
// connection @conn.Name@: set.
func (c @Pointer@conn.FullName) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Transaction, error) {
	tx, err := c.BaseConnection.BeginTx(ctx, opts)
	if err != nil {
		return nil, err
	}
	return NewTransaction(tx), nil
}
}

var (
@for _, conn := range env.Connections {@
	// @naming.PascalCase.Do(conn.Name) is a database connection reference.
	@naming.PascalCase.Do(conn.Name) @Pointer@conn.FullName
}
)

@for _, conn := range env.Connections {@
// Init@naming.PascalCase.Do(conn.Name)@: initializes the connection `@naming.PascalCase.Do(conn.Name):@`.
func Init@naming.PascalCase.Do(conn.Name)@:(db *sql.DB) {
	@naming.PascalCase.Do(conn.Name) = @raw("&")@conn.FullName@:{
		BaseConnection: ceous.NewConnection(db),
	}
}
}
