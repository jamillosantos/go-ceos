@{
	import generatorModels "github.com/jamillosantos/go-ceous/generator/models"
	import . "github.com/jamillosantos/go-ceous/generator/helpers"

	var connections []*generatorModels.Connection
	var models []*generatorModels.Model
}

type Creator interface {
@for _, model := range models {@
	// @model.Name@:Query creates a new query related with the connection set.
	@model.Name@:Query(options ...ceous.CeousOption) @Pointer@model.QueryName()
	// @model.Name@:Store creates a new store related with the connection set.
	@model.Name@:Store(options ...ceous.CeousOption) @Pointer@model.StoreName()
}
}

type Connection interface {
	ceous.DBRunner
	Creator
}

@for _, conn := range connections {@
type @conn.ConnectionName()  struct {
	@Pointer@:ceous.BaseConnection
}

	@for _, model := range models {@
// @model.Name@:Query creates a new query related with the connection @conn.Name@: set.
func (c @Pointer@conn.ConnectionName()) @model.Name@:Query(options ...ceous.CeousOption) @Pointer@model.QueryName() {
	return New@model.Name@:Query(append(options, ceous.WithConn(c))...)
}

// @model.Name@:Store creates a new store related with the connection @conn.Name@: set.
func (c @Pointer@conn.ConnectionName()) @model.Name@:Store(options ...ceous.CeousOption) @Pointer@model.StoreName() {
	return New@model.Name@:Store(append(options, ceous.WithConn(c))...)
}
	}

// Begin creates a new transaction with @conn.Name@: set.
func (c @Pointer@conn.ConnectionName()) Begin() (*Transaction, error) {
	tx, err := c.BaseConnection.Begin()
	if err != nil {
		return nil, err
	}
	return NewTransaction(tx), nil
}

// BeginTx creates a new transaction with extended config params with the
// connection @conn.Name@: set.
func (c @Pointer@conn.ConnectionName()) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Transaction, error) {
	tx, err := c.BaseConnection.BeginTx(ctx, opts)
	if err != nil {
		return nil, err
	}
	return NewTransaction(tx), nil
}
}

var (
@for _, conn := range connections {@
	// @conn.Name@ is a database connection reference.
	@(conn.Name) @Pointer@conn.ConnectionName()
}
)

@for _, conn := range connections {@
// Init@PascalCase(conn.Name)@: initializes the connection `@PascalCase(conn.Name):@`.
func Init@PascalCase(conn.Name)@:(db *sql.DB) {
	@conn.Name = @raw("&")@conn.ConnectionName()@:{
		BaseConnection: ceous.NewConnection(db),
	}
}
}
