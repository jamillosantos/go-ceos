// This file is generated by gorazor 2.0.1
// DON'T modified manually
// Should edit source file and re-generate: tpl/model.gohtml

package tpl

import (
	. "github.com/jamillosantos/go-ceous/generator/helpers"
	"github.com/jamillosantos/go-ceous/generator/models"
	myasthurts "github.com/lab259/go-my-ast-hurts"
	"github.com/sipin/gorazor/gorazor"
	"io"
	"strings"
)

// Model generates tpl/model.gohtml
func Model(pkg *myasthurts.Package, model *models.Model) string {
	var _b strings.Builder
	RenderModel(&_b, pkg, model)
	return _b.String()
}

// RenderModel render tpl/model.gohtml
func RenderModel(_buffer io.StringWriter, pkg *myasthurts.Package, model *models.Model) {
	_buffer.WriteString("\n\nvar ")
	_buffer.WriteString(gorazor.HTMLEscape(model.BaseSchemaName()))
	_buffer.WriteString(" = ceous.NewBaseSchema(\n\t\"")
	_buffer.WriteString(gorazor.HTMLEscape(model.TableName))
	_buffer.WriteString("\",\n\t\"\",")
	for _, field := range model.Columns {
		_buffer.WriteString("\n\tceous.NewSchemaField(\"")
		_buffer.WriteString(gorazor.HTMLEscape(field.Column))
		_buffer.WriteString("\"")
		if len(field.Modifiers) > 0 {
			for _, m := range field.Modifiers {

				_buffer.WriteString((", "))
				_buffer.WriteString((m()))

			}
		}
		_buffer.WriteString("),")
	}
	_buffer.WriteString("\n)")
	if model.PK != nil {
		_buffer.WriteString("\n\n// GetID returns the primary key for model `")
		_buffer.WriteString(gorazor.HTMLEscape(model.Name))
		_buffer.WriteString("`.\nfunc (model ")
		_buffer.WriteString(gorazor.HTMLEscape(Pointer))
		_buffer.WriteString(gorazor.HTMLEscape(model.Name))
		_buffer.WriteString(") GetID() interface{} {\n\treturn model.")
		_buffer.WriteString(gorazor.HTMLEscape(model.PK.Name))
		_buffer.WriteString("\n}")
	}
	for _, relation := range model.Relations {
		_buffer.WriteString("\n// ")
		_buffer.WriteString(gorazor.HTMLEscape(PascalCase(relation.FromField)))
		_buffer.WriteString(" returns the ")
		_buffer.WriteString(gorazor.HTMLEscape(relation.FromField))
		_buffer.WriteString(" from ")
		_buffer.WriteString(gorazor.HTMLEscape(model.Name))
		_buffer.WriteString(".\nfunc (model ")
		_buffer.WriteString(gorazor.HTMLEscape(Pointer))
		_buffer.WriteString(gorazor.HTMLEscape(model.Name))
		_buffer.WriteString(") ")
		_buffer.WriteString(gorazor.HTMLEscape(PascalCase(relation.FromField)))
		_buffer.WriteString("() ")
		_buffer.WriteString(gorazor.HTMLEscape(Pointer))
		_buffer.WriteString(gorazor.HTMLEscape(relation.ToModel.Name))
		_buffer.WriteString(" {\n\treturn model.")
		_buffer.WriteString(gorazor.HTMLEscape(relation.FromField))
		_buffer.WriteString("\n}\n\n// Set")
		_buffer.WriteString(gorazor.HTMLEscape(PascalCase(relation.FromField)))
		_buffer.WriteString(" updates the value for the ")
		_buffer.WriteString(gorazor.HTMLEscape(relation.FromField))
		_buffer.WriteString(",\n// updating the ")
		_buffer.WriteString(gorazor.HTMLEscape(relation.FromField))
		_buffer.WriteString(".\nfunc (model ")
		_buffer.WriteString(gorazor.HTMLEscape(Pointer))
		_buffer.WriteString(gorazor.HTMLEscape(model.Name))
		_buffer.WriteString(") Set")
		_buffer.WriteString(gorazor.HTMLEscape(PascalCase(relation.FromField)))
		_buffer.WriteString("(value ")
		_buffer.WriteString(gorazor.HTMLEscape(Pointer))
		_buffer.WriteString(gorazor.HTMLEscape(relation.FromColumnType))
		_buffer.WriteString(") error {\n\tc, err := model.ColumnAddress(\"")
		_buffer.WriteString(gorazor.HTMLEscape(relation.ToColumn))
		_buffer.WriteString("\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tv, ok := c.(")
		_buffer.WriteString(gorazor.HTMLEscape(Pointer))
		_buffer.WriteString(gorazor.HTMLEscape(relation.ToModel.PK.Type))
		_buffer.WriteString(")\n\tif !ok {\n\t\treturn errors.New(\"invalid key value\") // TODO(jota): To formalize this error.\n\t}\n\t*v = value.")
		_buffer.WriteString(gorazor.HTMLEscape(relation.ToModel.PK.Name))
		_buffer.WriteString("\n\tmodel.")
		_buffer.WriteString(gorazor.HTMLEscape(relation.FromField))
		_buffer.WriteString(" = value\n\treturn nil\n}")
	}
	RenderColumnAddress(_buffer, model)
	RenderColumnValue(_buffer, model)
	_buffer.WriteString("\n\ntype ")
	_buffer.WriteString(gorazor.HTMLEscape(model.SchemaName()))
	_buffer.WriteString(" struct {\n\t*ceous.BaseSchema")
	for _, field := range model.SchemaFields {
		_buffer.WriteString("\n\t")
		_buffer.WriteString(gorazor.HTMLEscape(field.Name))
		_buffer.WriteString(" ")
		if field.SchemaType == "" {

			_buffer.WriteString("ceous.SchemaField")

		} else {

			_buffer.WriteString("schema")
			_buffer.WriteString(gorazor.HTMLEscape(field.SchemaType))

		}
	}
	_buffer.WriteString("\n}")

}
