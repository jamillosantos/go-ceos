// This file is generated by gorazor 2.0.1
// DON'T modified manually
// Should edit source file and re-generate: tpl/schema.gohtml

package tpl

import (
	. "github.com/jamillosantos/go-ceous/generator/helpers"
	"github.com/jamillosantos/go-ceous/generator/models"
	"github.com/sipin/gorazor/gorazor"
	"io"
	"strings"
)

// Schema generates tpl/schema.gohtml
func Schema(env *models.Environment) string {
	var _b strings.Builder
	RenderSchema(&_b, env)
	return _b.String()
}

// RenderSchema render tpl/schema.gohtml
func RenderSchema(_buffer io.StringWriter, env *models.Environment) {
	_buffer.WriteString("\n\ntype schema struct {")
	for _, schema := range env.Schemas {
		if schema.IsModel {
			_buffer.WriteString("\n\t")
			_buffer.WriteString(gorazor.HTMLEscape(schema.Name))
			_buffer.WriteString(" ")
			_buffer.WriteString(gorazor.HTMLEscape(Pointer))
			_buffer.WriteString(gorazor.HTMLEscape(schema.FullName))
		}
	}
	_buffer.WriteString("\n}")
	for _, schema := range env.Schemas {
		_buffer.WriteString("\n// ")
		_buffer.WriteString(gorazor.HTMLEscape(schema.FullName))
		_buffer.WriteString(" have all fields for the model ")
		_buffer.WriteString(gorazor.HTMLEscape(schema.Name))
		_buffer.WriteString(".\ntype ")
		_buffer.WriteString(gorazor.HTMLEscape(schema.FullName))
		_buffer.WriteString(" struct {\n\t")
		if schema.IsModel {
			_buffer.WriteString("\n\t*ceous.BaseSchema\n\t")
		}
		_buffer.WriteString("\n\t")
		for _, field := range schema.Fields {
			_buffer.WriteString("\n\t\t")
			_buffer.WriteString(gorazor.HTMLEscape(field.Name))
			_buffer.WriteString(" ")
			if field.Type == "" {
				_buffer.WriteString("ceous.SchemaField")
			} else {
				_buffer.WriteString(field.SchemaName)
			}
		}
		_buffer.WriteString("\n}")
	}

}
